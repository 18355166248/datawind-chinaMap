import { a as t, E as e, A as i } from "./emitEvent.61fdb922.js";
const n = ({
    key: n,
    path: l,
    layout_size: a = i.Medium,
    title_cn: o = "字体",
    title_en: _ = "Font Family",
  }) => ({
    key: `${n}.fontFamily`,
    path: `${l}.fontFamily`,
    type: t.Enum,
    alias: e.FontFamily,
    layout_size: a,
    prefix: "icon",
    icon_type: "fontFamily",
    title_cn: o,
    title_en: _,
    items: [],
  }),
  l = ({
    key: n,
    path: l,
    layout_size: a = i.Medium,
    title_cn: o = "字重",
    title_en: _ = "Font Weight",
  }) => ({
    key: `${n}.fontWeight`,
    path: `${l}.fontWeight`,
    type: t.Enum,
    alias: e.FontWeight,
    layout_size: a,
    prefix: "icon",
    icon_type: "fontWeight",
    title_cn: o,
    title_en: _,
    items: [
      "100",
      "200",
      "300",
      "400",
      "500",
      "600",
      "bold",
      "bolder",
      "normal",
    ].map((t) => ({
      value: t,
      title_en: t,
      title_cn: t,
    })),
  }),
  a = ({
    key: n,
    path: l,
    layout_size: a = i.Medium,
    title_cn: o = "字号",
    title_en: _ = "Font Size",
    min: c = 1,
    max: p = 1e3,
  }) => ({
    key: `${n}.fontSize`,
    path: `${l}.fontSize`,
    type: t.Number,
    alias: e.FontSize,
    layout_size: a,
    prefix: "icon",
    icon_type: "fontSize",
    title_cn: o,
    title_en: _,
    min: c,
    max: p,
    mode: "integer",
    unit: "px",
  }),
  o = ({
    key: n,
    path: l,
    layout_size: a = i.Medium,
    title_cn: o = "文字颜色",
    title_en: _ = "Text Color",
  }) => ({
    key: `${n}.color`,
    path: `${l}.color`,
    type: t.Color,
    alias: e.FontColor,
    layout_size: a,
    title_cn: o,
    title_en: _,
  }),
  _ = ({
    key: n,
    path: l,
    layout_size: a = i.Medium,
    title_cn: o = "字间距",
    title_en: _ = "Letter Spacing",
    min: c = -999,
    max: p = 999,
  }) => ({
    key: `${n}.letterSpacing`,
    path: `${l}.letterSpacing`,
    type: t.Number,
    alias: e.LetterSpacing,
    layout_size: a,
    prefix: "icon",
    icon_type: "letterSpacing",
    title_cn: o,
    title_en: _,
    min: c,
    max: p,
    mode: "integer",
    unit: "px",
  }),
  c = ({
    key: n,
    path: l,
    layout_size: a = i.Small,
    title_cn: o = "水平对齐",
    title_en: _ = "Text Align",
  }) => ({
    key: `${n}.textAlign`,
    layout_size: a,
    title_cn: o,
    title_en: _,
    type: t.Enum,
    alias: e.RadioButtonGroup,
    path: `${l}.textAlign`,
    items: [
      {
        title_en: "Left",
        title_cn: "左",
        value: "left",
        icon: "textAlignLeft",
      },
      {
        title_en: "Center",
        title_cn: "中",
        value: "center",
        icon: "textAlignCenter",
      },
      {
        title_en: "Right",
        title_cn: "右",
        value: "right",
        icon: "textAlignRight",
      },
    ],
  }),
  p = ({
    key: n,
    path: l,
    layout_size: a = i.Small,
    title_cn: o = "垂直对齐",
    title_en: _ = "Vertical Align",
  }) => ({
    key: `${n}.verticalAlign`,
    layout_size: a,
    title_cn: o,
    title_en: _,
    type: t.Enum,
    alias: e.RadioButtonGroup,
    path: `${l}.verticalAlign`,
    items: [
      {
        title_en: "Top",
        title_cn: "顶",
        value: "top",
        icon: "verticalAlignTop",
      },
      {
        title_en: "Center",
        title_cn: "中",
        value: "center",
        icon: "verticalAlignCenter",
      },
      {
        title_en: "Bottom",
        title_cn: "底",
        value: "bottom",
        icon: "verticalAlignBottom",
      },
    ],
  });
export { l as a, n as b, a as c, o as d, _ as e, c as f, p as g };
